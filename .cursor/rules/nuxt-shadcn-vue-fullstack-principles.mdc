---
alwaysApply: false
---
# Coding Rules: Nuxt 3, Shadcn, Tailwind (JavaScript Edition)

This guide is for a modern web project using Nuxt 3, Shadcn Vue, Tailwind CSS, Pinia, and Framer Motion. **All code MUST be written in JavaScript.** Keep the project simple (**KISS principle**) and **always ask for a review before making major changes.**

---

## 1. General Principles & Naming

- **Code:** Write clean, concise, and readable ES6+ code. Use `const` and `let`; **avoid `var`**.
- **Principles:** Apply **DRY** (Don't Repeat Yourself) by creating reusable composables and utilities.
- **Typing:** Use **JSDoc** extensively for component props, function parameters, and Pinia state.
- **Naming Conventions:**
  - Variables & Functions: `camelCase`
  - Constants: `UPPER_SNAKE_CASE`
  - Vue Components: `PascalCase.vue`
  - Other Files: `kebab-case.js` or `camelCase.js`

---

## 2. Nuxt 3 & Vue

- **Structure:** Follow the standard Nuxt 3 directory structure (`pages`, `components`, `composables`, `server`, etc.).
- **Components:** **Always use `<script setup>`**. Leverage Nuxt's auto-imports.
- **Data Fetching:** Use `useFetch` or `useAsyncData`. Gracefully handle `pending` and `error` states.
- **Navigation:** Use `<NuxtLink>` for all internal links.
- **Authentication (Sidebase):**
  - **Client-side:** Use the `useAuth()` composable to manage sessions.
  - **Server-side:** Protect API routes with `getServerSession(event)`.
  - **Pages:** Protect private pages using route middleware.

---

## 3. Components & Shadcn Vue

- **Props & Emits:** Define them with `defineProps` and `defineEmits`.
- **Component Structure:** Build small, single-responsibility components. Use `slots` for content flexibility.
- **Shadcn Vue:** Use as the UI foundation. Customize primarily through props. For deep modifications, copy the component into the `components/ui` directory.

---

## 4. State Management (Pinia)

- **Definition:** Create stores inside the `store/` directory (e.g., `user.js` becomes `useUserStore`).
- **Structure:** Organize stores into `state`, `getters`, and `actions`. Document them with JSDoc.

---

## 5. Styling & Animations

- **Tailwind CSS:**
  - Embrace the **utility-first** approach.
  - Use responsive prefixes (`sm:`, `md:`, `lg:`) for mobile-first design.
  - Use `@apply` sparingly.
- **Framer Motion:**
  - Wrap elements in `motion` components (e.g., `<motion.div>`).
  - Control animations with `initial`, `animate`, `transition`, and `variants` props.
  - Focus on animating `transform` and `opacity` for the best performance.

---

## 6. Quality & Performance

- **Linting:** Use **ESLint** and **Prettier** to maintain code consistency and quality.
- **Error Handling:** Use `try...catch` for async operations and leverage Nuxt's `useError`/`showError`.
- **Optimization:**
  - **Lazy Loading:** Nuxt auto-splits code by route. Use `defineAsyncComponent` for manual component lazy loading if needed.
  - **Images:** Use `<NuxtImg>` from `@nuxt/image` and the `loading="lazy"` attribute.
  - **Events:** Use `debounce` or `throttle` for frequently triggered events (like scroll or resize).